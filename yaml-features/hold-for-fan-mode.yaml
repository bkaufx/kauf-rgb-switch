substitutions:

  ############################################################################
  # configuration substitutions.  redefine these in your local yaml file to
  # change behavior.  You should add these substitutions in your main yaml
  # under name and friendly_name.  This file does not need to be downloaded
  # and edited.

  hold_time: 750ms
  mode_time: 5s

  hass_fan_entity: no.ne
  hass_light_entity: no.ne

  speed_0_prcnt: '0'
  speed_1_prcnt: '33'
  speed_2_prcnt: '67'
  speed_3_prcnt: '100'

  speed_0_color: '0, 0, 0'
  speed_1_color: '255, 0, 0'
  speed_2_color: '155, 155, 0'
  speed_3_color: '0, 255, 0'

  mode_color: '255,0,0'



  # default brightness values for just turning light on.
  # brightness needs to be int 0-255.
  # brightness_pct needs to be 0-100.
  # default if none of these are overwritten is to turn on light without specifying a brightness
  #
  # set either:
  #  (a) one "entity" value to adopt brightness/pct from a home assistant entity.
  #  (b) one "entity" value and its paired "attribute" value to adopt brightness/pct from a home assistant entity attribute.
  #  (c) one "fixed" value to adopt a fixed brightness every time the light turns on.
  #  (d) DEFAULT: keep all values as "none" to not send a brightness with the turn_on command, keeping previous brightness.
  hass_brightness_entity:        none
  hass_brightness_attribute:     none
  hass_brightness_fixed:         none
  hass_brightness_pct_entity:    none
  hass_brightness_pct_attribute: none
  hass_brightness_pct_fixed:     none

  # default color or color temp values for just turning light on
  #
  # set either:
  #  (a) one "entity" value to adopt color/temp from a home assistant entity.
  #  (b) one "entity" value and its paired "attribute" value to adopt color/temp from a home assistant entity attribute.
  #  (c) one "fixed" value to always turn on light to a fixed color/temp
  #  (d) keep all values as set below to always turn light on to a fixed 250 mireds.
  #  (e) set the mireds_fixed value to "none" to keep the light's last set color
  #
  # In any case, these will be arguments to home assistant's light.turn_on service, so the values need to comply with
  # the requirements of those arguments (either rgb_color, color_temp, or kelvin).
  # https://www.home-assistant.io/integrations/light/#service-lightturn_on
  hass_rgb_entity:               none
  hass_rgb_attribute:            none
  hass_rgb_fixed:                none
  hass_ct_kelvin_entity:         none
  hass_ct_kelvin_attribute:      none
  hass_ct_kelvin_fixed:          none
  hass_ct_mireds_entity:         none
  hass_ct_mireds_attribute:      none
  hass_ct_mireds_fixed:          none


  ############################################################################
  # substitutions to implement functionality, do not change these
  sub_on_press:     script_on_press
  sub_on_release:   script_on_release
  sub_toggle_check: script_dont_toggle
  sub_on_turn_on:   switch_to_light
  sub_on_turn_off:  switch_to_light


globals:
  - id: fan_mode
    type: boolean
    restore_value: no
    initial_value: 'false'


esphome:
  on_boot:
    then:
        # set default values for template sensors, otherwise they are unknown.
        # this is needed because ESPHome is currently overwriting other on_boot section,
        # which is believed to be a bug.  Need to debug or report as issue to ESPHome.
        # potentially to do with https://github.com/esphome/esphome/pull/3510
      - binary_sensor.template.publish:
          id: button_single_press
          state: OFF
      - binary_sensor.template.publish:
          id: button_double_press
          state: OFF
      - binary_sensor.template.publish:
          id: button_hold
          state: OFF
      - select.set:
          id: select_button
          option: "Toggle on Release"


text_sensor:
  - platform: homeassistant
    id: hass_fan_state
    name: HASS Fan State
    entity_id: $hass_fan_entity
  - platform: homeassistant
    id: hass_fan_speed
    name: HASS Fan Speed
    entity_id: $hass_fan_entity
    attribute: percentage


script:

  - id: script_on_press
    then:

      # if not in fan mode
      - if:
          condition:
            lambda: return (!id(fan_mode));
          then:
            - delay: $hold_time
            - lambda: |-
                // set fan mode boolean, call don't toggle script to prevent light toggling in fan mode
                id(fan_mode) = true;
                id(script_dont_toggle).execute();

                // turn on big light to fan mode color
                auto call = id(big_light).turn_on();

                // grab colors
                int used_colors[3] = {$mode_color};
                int red = used_colors[0];
                int green = used_colors[1];
                int blue = used_colors[2];

                // perform call to change big light color to mode color
                call.set_rgb( (float) red/255.0f , (float) green/255.0f , (float) blue/255.0f );
                call.set_transition_length(0);
                call.perform();

                // new call for small light based on fan speed
                call = id(small_light).turn_on();

                // grab color based on speed
                if (strcmp(id(hass_fan_state).state.c_str(),"off") == 0) {
                  // if fan is off, speed "0" is assumed
                  int used_colors2[3] = {$speed_0_color};
                  red = used_colors2[0];
                  green = used_colors2[1];
                  blue = used_colors2[2];
                }
                else if (strcmp(id(hass_fan_speed).state.c_str(),"$speed_1_prcnt") == 0) {
                  int used_colors2[3] = {$speed_1_color};
                  red = used_colors2[0];
                  green = used_colors2[1];
                  blue = used_colors2[2];
                }
                else if (strcmp(id(hass_fan_speed).state.c_str(),"$speed_2_prcnt") == 0) {
                  int used_colors2[3] = {$speed_2_color};
                  red = used_colors2[0];
                  green = used_colors2[1];
                  blue = used_colors2[2];
                }
                else if (strcmp(id(hass_fan_speed).state.c_str(),"$speed_3_prcnt") == 0) {
                  int used_colors2[3] = {$speed_3_color};
                  red = used_colors2[0];
                  green = used_colors2[1];
                  blue = used_colors2[2];
                }
                else {
                  int used_colors2[3] = {$speed_0_color};
                  red = used_colors2[0];
                  green = used_colors2[1];
                  blue = used_colors2[2];
                }

                // perform call to change small light color to speed color
                if ( (red==0) && (green==0) && (blue==0) ) {
                  call.set_state(false);
                }
                else {
                  call.set_rgb( (float) red/255.0f , (float) green/255.0f , (float) blue/255.0f );
                }
                call.set_transition_length(0);
                call.perform();

          else: # already in fan mode
            - lambda: |-
                //
                int red, green, blue, fan_speed;

                // set speed and grab color based on current speed
                if (strcmp(id(hass_fan_state).state.c_str(),"off") == 0) {
                  // if fan is off, speed "0" is assumed
                  int used_colors2[3] = {$speed_1_color};
                  red = used_colors2[0];
                  green = used_colors2[1];
                  blue = used_colors2[2];
                  fan_speed = $speed_1_prcnt;
                }
                else if (strcmp(id(hass_fan_speed).state.c_str(),"$speed_1_prcnt") == 0) {
                  int used_colors2[3] = {$speed_2_color};
                  red = used_colors2[0];
                  green = used_colors2[1];
                  blue = used_colors2[2];
                  fan_speed = $speed_2_prcnt;
                }
                else if (strcmp(id(hass_fan_speed).state.c_str(),"$speed_2_prcnt") == 0) {
                  int used_colors2[3] = {$speed_3_color};
                  red = used_colors2[0];
                  green = used_colors2[1];
                  blue = used_colors2[2];
                  fan_speed = $speed_3_prcnt;
                }
                else if (strcmp(id(hass_fan_speed).state.c_str(),"$speed_3_prcnt") == 0) {
                  int used_colors2[3] = {$speed_0_color};
                  red = used_colors2[0];
                  green = used_colors2[1];
                  blue = used_colors2[2];
                  fan_speed = $speed_0_prcnt;
                }
                else {
                  int used_colors2[3] = {$speed_1_color};
                  red = used_colors2[0];
                  green = used_colors2[1];
                  blue = used_colors2[2];
                  fan_speed = $speed_1_prcnt;
                }

                // perform home assistant service call to set fan speed
                HomeassistantServiceResponse resp;
                resp.service = "fan.turn_on";

                HomeassistantServiceMap kv;

                if ( fan_speed == 0) {
                  resp.service = "fan.turn_off";

                  HomeassistantServiceMap kv;

                  kv.key = "entity_id";
                  kv.value = "$hass_fan_entity";
                  resp.data.push_back(kv);
                } else {
                  resp.service = "fan.turn_on";

                  HomeassistantServiceMap kv;

                  kv.key = "entity_id";
                  kv.value = "$hass_fan_entity";
                  resp.data.push_back(kv);

                  kv.key = "percentage";
                  kv.value = to_string(fan_speed);
                  resp.data.push_back(kv);
                }

                global_api_server->send_homeassistant_service_call(resp);

                // perform call to change small light color to speed color
                auto call = id(small_light).turn_on();

                if ( (red==0) && (green==0) && (blue==0) ) {
                  call.set_state(false);
                }
                else {
                  call.set_rgb( (float) red/255.0f , (float) green/255.0f , (float) blue/255.0f );
                }

                call.set_transition_length(0);
                call.perform();


  - id: script_on_release
    then:
      - script.execute: mode_timeout

      # stop on press script if not in fan mode
      - if:
          condition:
            lambda: return (!id(fan_mode));
          then:
            - script.stop: script_on_press

  - id: mode_timeout
    mode: restart
    then:
      - if:
          condition:
            lambda: return (id(fan_mode));
          then:
            - delay: $mode_time
            - lambda: id(fan_mode) = false;
            - script.execute: copy_vals


    # don't toggle light in fan mode
  - id: script_dont_toggle
    then:
      - wait_until:
          lambda: return (!id(fan_mode));
      - delay: 25ms

  - id: switch_to_light
    then:
      - lambda: |-
          // exit if light entity not set
          if (strcmp("$hass_light_entity","no.ne") == 0) { return; }

          // turn off home assistant light if switch off
          if ( !id(ui_switch).state ) {

            HomeassistantServiceResponse resp;
            resp.service = "light.turn_off";

            HomeassistantServiceMap kv;

            kv.key = "entity_id";
            kv.value = "$hass_light_entity";
            resp.data.push_back(kv);

            global_api_server->send_homeassistant_service_call(resp);
          }

          // turn on home assistant light if switch is on
          else {
            HomeassistantServiceResponse resp;
            resp.service = "light.turn_on";

            HomeassistantServiceMap kv;

            kv.key = "entity_id";
            kv.value = "$hass_light_entity";
            resp.data.push_back(kv);

            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            // add brightness if set

            // brightness entity set, attribute not set
            if ( (strcmp("$hass_brightness_entity","none")!=0) && (strcmp("$hass_brightness_attribute","none")==0) ) {
              kv.key = "brightness";
              kv.value = "{{ states(\"$hass_brightness_entity\") }}";
              resp.data_template.push_back(kv);
            }

            // brightness entity and attribute both set
            else if ( (strcmp("$hass_brightness_entity","none")!=0) && (strcmp("$hass_brightness_attribute","none")!=0) ) {
              kv.key = "brightness";
              kv.value = "{{ state_attr(\"$hass_brightness_entity\",\"$hass_brightness_attribute\") }}";
              resp.data_template.push_back(kv);
            }

            // fixed brightness set
            else if ( strcmp("$hass_brightness_fixed","none")!=0 ) {
              kv.key = "brightness";
              kv.value = "$hass_brightness_fixed";
              resp.data.push_back(kv);
            }

            // brightness_pct entity set, attribute not set
            else if ( (strcmp("$hass_brightness_pct_entity","none")!=0) && (strcmp("$hass_brightness_pct_attribute","none")==0) ) {
              kv.key = "brightness_pct";
              kv.value = "{{ states(\"$hass_brightness_pct_entity\") }}";
              resp.data_template.push_back(kv);
            }

            // brightness_pct entity and attribute both set
            else if ( (strcmp("$hass_brightness_pct_entity","none")!=0) && (strcmp("$hass_brightness_pct_attribute","none")!=0) ) {
              kv.key = "brightness_pct";
              kv.value = "{{ state_attr(\"$hass_brightness_pct_entity\",\"$hass_brightness_pct_attribute\") }}";
              resp.data_template.push_back(kv);
            }

            // fixed brightness_pct set
            else if ( strcmp("$hass_brightness_pct_fixed","none")!=0 ) {
              kv.key = "brightness_pct";
              kv.value = "$hass_brightness_pct_fixed";
              resp.data.push_back(kv);
            }


            ///////////////////////////////////////////////////////////////////////////////////////////////////////////
            // add color/temp if set

            // fixed kelvin set
            if ( strcmp("$hass_ct_kelvin_fixed","none")!=0 ) {
              kv.key = "kelvin";
              kv.value = "$hass_ct_kelvin_fixed";
              resp.data.push_back(kv);
            }

            // mireds entity set, attribute not set
            else if ( (strcmp("$hass_ct_kelvin_entity","none")!=0) && (strcmp("$hass_ct_kelvin_attribute","none")==0) ) {
              kv.key = "kelvin";
              kv.value = "{{ states(\"$hass_ct_kelvin_entity\") }}";
              resp.data_template.push_back(kv);
            }

            // mireds entity and attribute both set
            else if ( (strcmp("$hass_ct_kelvin_entity","none")!=0) && (strcmp("$hass_ct_kelvin_attribute","none")!=0) ) {
              kv.key = "kelvin";
              kv.value = "{{ state_attr(\"$hass_ct_kelvin_entity\",\"$hass_ct_kelvin_attribute\") }}";
              resp.data_template.push_back(kv);
            }

            // fixed rgb set
            else if ( strcmp("$hass_rgb_fixed","none")!=0 ) {
              kv.key = "rgb_color";
              kv.value = "$hass_rgb_fixed";
              resp.data.push_back(kv);
            }

            // rgb entity set, attribute not set
            else if ( (strcmp("$hass_rgb_entity","none")!=0) && (strcmp("$hass_rgb_attribute","none")==0) ) {
              kv.key = "rgb_color";
              kv.value = "{{ states(\"$hass_rgb_entity\") }}";
              resp.data_template.push_back(kv);
            }

            // rgb entity and attribute both set
            else if ( (strcmp("$hass_rgb_entity","none")!=0) && (strcmp("$hass_rgb_attribute","none")!=0) ) {
              kv.key = "rgb_color";
              kv.value = "{{ state_attr(\"$hass_rgb_entity\",\"$hass_rgb_attribute\") }}";
              resp.data_template.push_back(kv);
            }

            // mireds entity set, attribute not set
            else if ( (strcmp("$hass_ct_mireds_entity","none")!=0) && (strcmp("$hass_ct_mireds_attribute","none")==0) ) {
              kv.key = "color_temp";
              kv.value = "{{ states(\"$hass_ct_mireds_entity\") }}";
              resp.data_template.push_back(kv);
            }

            // mireds entity and attribute both set
            else if ( (strcmp("$hass_ct_mireds_entity","none")!=0) && (strcmp("$hass_ct_mireds_attribute","none")!=0) ) {
              kv.key = "color_temp";
              kv.value = "{{ state_attr(\"$hass_ct_mireds_entity\",\"$hass_ct_mireds_attribute\") }}";
              resp.data_template.push_back(kv);
            }

            // fixed mireds set (last since set by default, that way any other option set will override)
            else if ( strcmp("$hass_ct_mireds_fixed","none")!=0 ) {
              kv.key = "color_temp";
              kv.value = "$hass_ct_mireds_fixed";
              resp.data.push_back(kv);
            }

            global_api_server->send_homeassistant_service_call(resp);

          }
